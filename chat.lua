
local function anti_debugger()
    local x = 0
    for i = 1, 100 do
        x = x + math.random(1, 100)
    end
    return x
end

anti_debugger()


local function xor_decrypt(text, key)
    local result = ""
    for i = 1, #text do
        local char = string.char(string.byte(text, i) ~ string.byte(key, (i - 1) % #key + 1))
        result = result .. char
    end
    return result
end

local encoded_script = ""
local xor_key = "S3cUr3K3y"
local decoded_script = xor_decrypt(game:HttpGet("data:text/plain;base64," .. encoded_script), xor_key)
loadstring(decoded_script)()


local function anti_debugger()
    local x = 0
    for i = 1, 100 do
        x = x + math.random(1, 100)
    end
    return x
end

anti_debugger()
